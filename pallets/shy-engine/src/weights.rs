
//! Autogenerated weights for module_shy_engine
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-02-26, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/eave
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=module_shy_engine
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./modules/shy-engine/src/weights.rs
// --template=./templates/module-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for module_shy_engine.
pub trait WeightInfo {
	fn set_collateral_params() -> Weight;
	fn set_global_params() -> Weight;
	fn liquidate_by_auction() -> Weight;
	fn liquidate_by_dex() -> Weight;
	fn settle() -> Weight;
}

/// Weights for module_shy_engine using the Eave node and recommended hardware.
pub struct EaveWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for EaveWeight<T> {
	fn set_collateral_params() -> Weight {
		(37_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn set_global_params() -> Weight {
		(11_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn liquidate_by_auction() -> Weight {
		(203_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(28 as Weight))
			.saturating_add(T::DbWeight::get().writes(17 as Weight))
	}
	fn liquidate_by_dex() -> Weight {
		(252_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(29 as Weight))
			.saturating_add(T::DbWeight::get().writes(15 as Weight))
	}
	fn settle() -> Weight {
		(97_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn set_collateral_params() -> Weight {
		(37_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn set_global_params() -> Weight {
		(11_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn liquidate_by_auction() -> Weight {
		(203_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(28 as Weight))
			.saturating_add(RocksDbWeight::get().writes(17 as Weight))
	}
	fn liquidate_by_dex() -> Weight {
		(252_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(29 as Weight))
			.saturating_add(RocksDbWeight::get().writes(15 as Weight))
	}
	fn settle() -> Weight {
		(97_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
}
